[["index.html", "Movie Rating Analysis Test Chapter 1 Introduction", " Movie Rating Analysis Test Sharmi Mathur, Charlie Sturr, Ayush Baral 2021-12-12 Chapter 1 Introduction In the world of rotten tomatoes, metacritic, IMDB, and many others, movies are often picked apart by critics before audiences have a chance to even see the film. Although audiences often turn to these resources as a way to gauge their interest in seeing the actual film, many executives have bemoaned the prevalence of online reviews. A 2017 New York Times article, which explores Hollywoods reaction to a flat 2017 summer season, quotes industry insiders as saying: I think its Rotten Tomatoes the destruction of our business (Brett Ratner, director, producer and film financier). For our final project, we decided to take a deeper look at the entertainment industry. Therefore, our questions and objectives for this project will be centered around exploring the relationship between studio budgets, audience / critic perception, and box office performance, to see if Hollywood executives have taken any basic statistics courses and are justified in their complaints about the negative impact of Rotten Tomatoes (and others). 1.0.1 Our questions are as follows: How have Rotten Tomatoes / Metacritic / IMDB Ratings trended over time? Are audiences getting more or less pessimistic? How have box office returns trended over time? Are movies making more money or less? How are box office returns distributed? Is there a more equitable split across all movies released in a given quarter or have earnings consolidated? What is the correlation between audience scores and box office success? What is the correlation between studio budget and box office success? Do high-budget / low rating movies make more money? Or do low-budget, high ratings movies make more money? How does movie genre impact these previous questions? Can we split across horror / action / romance / etc.? What would be the relationship between the movies, that were released on the same date? How well did the movies perform financially, when they were released on the same weekend? "],["data-sources.html", "Chapter 2 Data sources 2.1 Rotten Tomatoes 2.2 IMDB 2.3 Final Data Table", " Chapter 2 Data sources In order to aggregate a comprehensive list of movie titles, box office gross, and ratings, we turned to the following data sources and followed the following processes. The first observation we made is that the IMDB data set with aggregate movies, genres, and ratings was quite large. For movies alone, there were well over millions of titles from around the world. Therefore, we needed to make some strategic decisions about which movies to include, and what logic to include. Because of the sheer volume of titles, we aggregated the following: We constrained our movies to be within movies released from 2011 to 2021 We constrained the movies included to be the top 200 total grossing movies from each year Total gross includes both box office and streaming services Once we constrained our list, the first task was to get a working list of the movies we wanted to include. We first turned to box office mojo, https://www.boxofficemojo.com/, which is a product offered by IMDB. In box office mojo, IMDB aggregates the top 200 movies from each year by title, gross, total gross, and number of theaters the film was released in. Using this data source, we aggregated all movies from each year to create our first data frame and get our initial movie list we planned to scrape. 2.1 Rotten Tomatoes Rotten Tomatoes is one of the most cited and well known movie ratings websites in the world. Rotten Tomatoes aggregates both an &quot;audience score&quot; and a &quot;critics score&quot;. This distinction is important, as one of our focuses of our analysis is looking at how reviews impact box office scores, and so by having both of these perspectives we can see if one or the other drives box office performance more. In order to aggregate our Rotten Tomatoes data, we used a simple Rotten Tomatoes scraper package in python. The documentation can be found here: https://github.com/pdrm83/rotten_tomatoes_scraper To implement this scraper, we passed in our initial list of 2,200 movie titles that we had originally sorted by box office gross in our initial data collection. By iterating through each title in our list, we were able to successfully scrape both audience and critic ratings from Rotten Tomatoes, with only minor data loss (more on that in the missing values section). 2.2 IMDB As previously mentioned, the IMDB data set is quite large. Because IMDB traces movies, shorts, and TV shows back to the early days of film (the early 1900s), the data set was quite unweildy and took quite a bit of masnaging to wrangle. We will cover exactly how we cleaned this data in our cleaning section. The two files we pulled from the IMDB data were the &quot;title.ratings.tsv.gz&quot; and &quot;title.basic.tsv.gz&quot;. The documentation can be found here: https://www.imdb.com/interfaces/ For the ratings file, there were 3 elements: tconst (the unique title identifier; a string) averageRating (from 0-10) numVotes (the number of votes included) For the titles file, there were 9 elements: tconst (the unique title identifier; a string) titleType (the type of film it is - could be TV Show, Movie, Short, etc.) primaryTitle (the title used in promotional materials. This was the title we used in our filtering) originalTitle (the title originally used. Typically the two titles are the same, unless one is in a different language) isAdult (boolean operator for adult movies. We did not include any adult movies in our analysis) startYear (release year of the title) endYear (only used for TV series; if the series ended) runTimeMinutes (run time of the title) genres (the genre of the film. Can be 1 - 3 values in a string) 2.3 Final Data Table After aggregating the three data sources, we had the following data inputs: ## [1] &quot;Rank - ranking of box office gross within the release year&quot; ## [2] &quot;Movie Title&quot; ## [3] &quot;Gross&quot; ## [4] &quot;Number of Theaters&quot; ## [5] &quot;Total Gross - includes streaming / DVD / etc.&quot; ## [6] &quot;Release Date (D/M)&quot; ## [7] &quot;Primary Studio&quot; ## [8] &quot;Year Released&quot; ## [9] &quot;Critic score scraped from RT&quot; ## [10] &quot;Audience score scraped from RT&quot; ## [11] &quot;Genre - concatenated - max 3 elements&quot; ## [12] &quot;1st genre element&quot; ## [13] &quot;2nd genre element&quot; ## [14] &quot;3rd genre element&quot; ## [15] &quot;Average IMDB rating&quot; ## [16] &quot;Number of IMDB votes&quot; ## [17] &quot;Year pulled from IMDB&quot; ======= * Scraped data from rotten tomatoes * Downloaded from imdb * Chosen because these are the biggest hubs for movie information * Refer to sample column names above * Started from 2300 * Talk about how we picked the top 200 movies * Talk about why we picked the top 200 movies * Issues: duplicate names, same movie multiple countries "],["data-transformation.html", "Chapter 3 Data transformation 3.1 Box Office Mojo 3.2 Rotten Tomatoes 3.3 IMDB 3.4 Aggregation", " Chapter 3 Data transformation The data transofrmation process was relatively straightforward. For each source, we will go through how and in what platforms we aggregated the values. 3.1 Box Office Mojo The box office mojo data set is presented in a simple table that is easily scraped from the website. For each year we were evaluating, we filted by top 200 movies, and imported the data into a CSV by title. From there, we had an aggregate list of 2,200 movies from 2011-2021. 3.2 Rotten Tomatoes Once we ran the scraper, we output the rotten tomatoes data from jupyter notebook into a CSV. The data was organized by movie title, and by critic / audience rating. 3.3 IMDB This was one of the most cumbersome cleaning processes, because the data set was so large. In order to make it more managable, we did all of our maniuplation in python, and filtered on the following: Release Year - we had to convert to a numeric string, and then filtered if release year was greater than 2010 Title Type - we filtered only movies From there, we imported a new .dat file that was the aggregate list of 2,200 movies we had originally scraped from Box Office Mojo, and iterated through the remaining data values to pull the required IMDB data. We output the new IMDB data into a CSV file as well. 3.4 Aggregation "],["after-our-scraping-from-the-3-sources-we-had-3-unique-csv-files.-we-merged-these-files-by-title-to-create-our-aggregate-list-of-movies-and-the-corresponding-data-points..html", "Chapter 4 After our scraping from the 3 sources, we had 3 unique CSV files. We merged these files by title, to create our aggregate list of movies and the corresponding data points. 4.1 Looking For Missing Data In The Ratings: IMDB, Score_Audience and Score_Rotten", " Chapter 4 After our scraping from the 3 sources, we had 3 unique CSV files. We merged these files by title, to create our aggregate list of movies and the corresponding data points. Downloaded data from imdb tsv Scraped rotten tomatoes Excel spreadsheet to csv Brought together with python Merge on whatever column names Here, The three chart shows us in which row do we have missing values. Like from the first bar chart, we can see that we are missing more than 750 rows of data in the Genre_3 or G_3 column. Using this data gives us a bit of an idea on how to proceed with further analysis. Here, we can see where in our dataset do we have na values or the missing values, which columns have more missing data.This tile visualization provides us with a concrete idea of the placement of the missing values. Example: We can see that there are a lot of movies with Genre_3 which are missing some values. Here we only took the data from 100-200. Just to show the example, and the visualization better. 4.1 Looking For Missing Data In The Ratings: IMDB, Score_Audience and Score_Rotten Here, we created three extra columns to check whether we had any missing ratings or scores abd populated them with 1 and 0. 1 for True they are missing and 0 for false they are not. We can see that in our dataset, we had 150 missing IMDB ratings for our movies, and about 110 values for our audience score, and the total missing values for score_ratings were about 260. Here, MISSING.VALUE is score ratings. "],["results.html", "Chapter 5 Results 5.1 Correlation between total gross and audience score - aggregate 5.2 Correlation between total gross and critic score - aggregate 5.3 Correlation between total gross and IMDB score - aggregate", " Chapter 5 Results 5.1 Correlation between total gross and audience score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = audience_score, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 5.2 Correlation between total gross and critic score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = critic_score, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 5.3 Correlation between total gross and IMDB score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = rating, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test "],["filtering-by-good-and-bad-movies.html", "Chapter 6 Filtering by &quot;Good and bad movies&quot; 6.1 Correlation between total gross and audience score - aggregate 6.2 Correlation between total gross and critic score - aggregate 6.3 Correlation between total gross and IMDB score - aggregate 6.4 Correlation between audience and critic scores - aggregate 6.5 Correlation between audience and IMDB score - aggregate 6.6 Correlation between critic and IMDB score - aggregate 6.7 Box and Whisker - IMDB rating and gross 6.8 Box and Whisker - audience rating and gross 6.9 Box and Whisker - critic rating and gross 6.10 Aggregating and filtering top earning studios 6.11 Cuts by year - audience vs. critic 6.12 Cuts by year - imdb vs. audience 6.13 Cuts by year - imdb vs. critic 6.14 Average IMDB rating by month and year 6.15 Average audience rating by month and year 6.16 Average critic rating by month and year 6.17 Average critic rating by month and year 6.18 Average ratings by just year 6.19 Average ratings by just year 6.20 Average ratings by just year 6.21 by genre 6.22 Aggregating and filtering top earning studios 6.23 Aggregating gross and total gross", " Chapter 6 Filtering by &quot;Good and bad movies&quot; 6.1 Correlation between total gross and audience score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0, audience_score&gt;50), aes(x = audience_score, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000, audience_score&gt;50), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000, audience_score&gt;50), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000, audience_score&gt;50), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 6.2 Correlation between total gross and critic score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0, critic_score&gt;50), aes(x = critic_score, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000, critic_score&gt;50), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000,critic_score&gt;50), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000,critic_score&gt;50), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 6.3 Correlation between total gross and IMDB score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0, rating&gt;5), aes(x = rating, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000, rating&gt;5), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000, rating&gt;5), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000, rating&gt;5), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 6.4 Correlation between audience and critic scores - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = audience_score, y = critic_score)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = audience_score, y = critic_score)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = audience_score, y = critic_score)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = audience_score, y = critic_score)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 6.5 Correlation between audience and IMDB score - aggregate gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = audience_score, y = rating)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = audience_score, y = rating)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = audience_score, y = rating)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = audience_score, y = rating)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) 6.6 Correlation between critic and IMDB score - aggregate gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = critic_score, y = rating)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = critic_score, y = rating)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = critic_score, y = rating)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = critic_score, y = rating)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) 6.7 Box and Whisker - IMDB rating and gross correlation_df$band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(band = ifelse(rating &lt;1, &quot;0-0.9&quot;, ifelse(rating&lt;2, &quot;1-1.9&quot;, ifelse(rating&lt;3,&quot;2-2.9&quot;, ifelse(rating&lt;4,&quot;3-3.9&quot;, ifelse(rating&lt;5,&quot;4-4.9&quot;, ifelse(rating&lt;6,&quot;5-5.9&quot;, ifelse(rating&lt;7,&quot;6-6.9&quot;, ifelse(rating&lt;8,&quot;7-7.9&quot;, ifelse(rating&lt;9,&quot;8-8.9&quot;, ifelse(rating&lt;=10,&quot;9-10&quot;))))))))))) g_imdb &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_imdb 6.8 Box and Whisker - audience rating and gross correlation_df$audience_band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(audience_band = ifelse(audience_score &lt;10, &quot;0-0.9&quot;, ifelse(audience_score&lt;20, &quot;1-1.9&quot;, ifelse(audience_score&lt;30,&quot;2-2.9&quot;, ifelse(audience_score&lt;40,&quot;3-3.9&quot;, ifelse(audience_score&lt;50,&quot;4-4.9&quot;, ifelse(audience_score&lt;60,&quot;5-5.9&quot;, ifelse(audience_score&lt;70,&quot;6-6.9&quot;, ifelse(audience_score&lt;80,&quot;7-7.9&quot;, ifelse(audience_score&lt;90,&quot;8-8.9&quot;, ifelse(audience_score&lt;=100,&quot;9-10&quot;,&quot;na&quot;))))))))))) g_audience &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = audience_band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by Audience ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_audience 6.9 Box and Whisker - critic rating and gross correlation_df$critic_band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(critic_band = ifelse(critic_score &lt;10, &quot;0-0.9&quot;, ifelse(critic_score&lt;20, &quot;1-1.9&quot;, ifelse(critic_score&lt;30,&quot;2-2.9&quot;, ifelse(critic_score&lt;40,&quot;3-3.9&quot;, ifelse(critic_score&lt;50,&quot;4-4.9&quot;, ifelse(critic_score&lt;60,&quot;5-5.9&quot;, ifelse(critic_score&lt;70,&quot;6-6.9&quot;, ifelse(critic_score&lt;80,&quot;7-7.9&quot;, ifelse(critic_score&lt;90,&quot;8-8.9&quot;, ifelse(critic_score&lt;=100,&quot;9-10&quot;,&quot;na&quot;))))))))))) g_critic &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = critic_band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by Critic ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_critic g_imdb + g_audience + g_critic + plot_layout(widths = 3, heights = 3) 6.10 Aggregating and filtering top earning studios movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 studio_df &lt;- data.frame(gross, movies$Studio) aggregate_df&lt;- aggregate(gross~movies.Studio, data=studio_df, sum) %&gt;% arrange(desc(gross)) 6.11 Cuts by year - audience vs. critic movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = audience_score, y = critic_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 6.12 Cuts by year - imdb vs. audience movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = rating, y = audience_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 6.13 Cuts by year - imdb vs. critic movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = rating, y = critic_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 6.14 Average IMDB rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$rating), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$rating) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) imdb_time&lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 6.15 Average audience rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$audience_score), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$audience_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) audience_time&lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 6.16 Average critic rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$critic_score), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$critic_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) critic_time &lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 6.17 Average critic rating by month and year imdb_time audience_time critic_time 6.18 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$rating), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$rating) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 6.19 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$audience_score), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$audience_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 6.20 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$critic_score), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$critic_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 6.21 by genre movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) head(movies) ## Rank Title Gross X..of.Theaters ## 1 1 Harry Potter and the Deathly Hallows: Part 2 381011219 4375 ## 2 2 Transformers: Dark of the Moon 352390543 4088 ## 3 3 The Twilight Saga: Breaking Dawn - Part 1 274841954 4066 ## 4 4 The Hangover Part II 254464305 3675 ## 5 5 Pirates of the Caribbean: On Stranger Tides 241071802 4164 ## 6 6 Fast Five 209837675 3793 ## Total.Gross Release.Date Studio Year ## 1 381011219 7/15 Warner Bros. 2011 ## 2 352390543 6/29 DreamWorks 2011 ## 3 281287133 11/18 Summit Entertainment 2011 ## 4 254464305 5/26 Warner Bros. 2011 ## 5 241071802 5/20 Walt Disney Studios Motion Pictures 2011 ## 6 209837675 4/29 Universal Pictures 2011 ## Score_Rotten Score_Audience genre genre1 genre2 ## 1 96 89 Adventure,Fantasy,Mystery Adventure Fantasy ## 2 35 55 Action,Adventure,Sci-Fi Action Adventure ## 3 25 60 Adventure,Drama,Fantasy Adventure Drama ## 4 34 52 Comedy Comedy ## 5 33 54 Action,Adventure,Fantasy Action Adventure ## 6 77 83 Action,Adventure,Crime Action Adventure ## genre3 average_rating numvotes startYear MISSING.VALUE Missing.Rotten ## 1 Mystery 8.1 808813 2011 0 0 ## 2 Sci-Fi 6.2 395497 2011 0 0 ## 3 Fantasy 4.9 232357 2011 0 0 ## 4 6.5 479995 2011 0 0 ## 5 Fantasy 6.6 500148 2011 0 0 ## 6 Crime 7.3 368386 2011 0 0 ## Missing.IMDB day month final_date ## 1 0 15 7 7/15/2011 ## 2 0 29 6 6/29/2011 ## 3 0 18 11 11/18/2011 ## 4 0 26 5 5/26/2011 ## 5 0 20 5 5/20/2011 ## 6 0 29 4 4/29/2011 gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) genre_df &lt;- data.frame(movies$Title, gross, audience_score, critic_score, rating, movies$genre1, movies$genre2, movies$genre3, movies$genre) colnames(genre_df) = c(&quot;title&quot;, &quot;gross&quot;, &quot;score_audience&quot;, &quot;score_rotten&quot;, &quot;average_rating&quot;, &quot;genre1&quot;, &quot;genre2&quot;, &quot;genre3&quot;, &quot;genre&quot;) aggregate_genre1&lt;- aggregate(gross~genre1, data=genre_df, sum) %&gt;% arrange(desc(gross)) aggregate_genre2&lt;- aggregate(gross~genre2, data=genre_df %&gt;% filter(genre_df$genre2 != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) aggregate_genre3&lt;- aggregate(gross~genre3, data=genre_df %&gt;% filter(genre_df$genre3 != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) aggregate_genre &lt;- aggregate(gross~genre, data=genre_df %&gt;% filter(genre_df$genre != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) genre1_unique &lt;- unique(genre_df$genre1) genre2_unique &lt;- unique(genre_df$genre2) genre3_unique &lt;- unique(genre_df$genre3) genre_unique &lt;- unique(genre_df$genre) g_genre1 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre1)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre2 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre2)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre3 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre3)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre1 g_genre2 g_genre3 genre_filtered &lt;- genre_df %&gt;% filter(gross&gt;50, genre1 == c(&quot;Action&quot;, &quot;Adventure&quot;, &quot;Comedy&quot;, &quot;Biography&quot;, &quot;Horror&quot;, &quot;Documentary&quot;, &quot;Animation&quot;), score_audience != &quot;MISSING VALUE&quot;) genre_correlation &lt;- ggplot(genre_filtered, aes(x = score_audience, y = gross)) + geom_point()+ geom_smooth(method=lm) + facet_wrap(~genre1) genre_correlation 6.22 Aggregating and filtering top earning studios movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 studio_df &lt;- data.frame(gross, movies$Studio, movies$Year) total_by_studio&lt;- aggregate(gross~movies.Studio, data=studio_df, sum) %&gt;% arrange(desc(gross)) aggregate_df&lt;- aggregate(gross~movies.Studio+movies.Year, data=studio_df, sum) %&gt;% arrange(desc(gross)) final_merged &lt;- merge(aggregate_df, total_by_studio, &quot;movies.Studio&quot;) %&gt;% filter(gross.y&gt;20000) ggplot(data=final_merged, aes(x=movies.Year, y=gross.x, color = movies.Studio))+ geom_line() for_table &lt;- data.frame(gross, movies$Studio, movies$Year, movies$Title) %&gt;% filter(movies$Studio %in% c(&quot;Walt Disney Studios Motion Pictures&quot;, &quot;Warner Bros.&quot;, &quot;Universal Pictures&quot;, &quot;Twentieth Century Fox&quot;, &quot;The Weinstein Company&quot;, &quot;Sony Pictures Entertainment (SPE)&quot;, &quot;Paramount Pictures&quot;, &quot;Lionsgate&quot;)) 6.23 Aggregating gross and total gross movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) t_gross &lt;- as.numeric(movies$Total.Gross)/100000 gross &lt;- as.numeric(movies$Gross)/100000 gross_df_aggregate &lt;- data.frame(gross, t_gross, movies$Year) total_by_year1&lt;- aggregate(gross~movies.Year, data=gross_df_aggregate, sum) total_by_year2&lt;- aggregate(t_gross~movies.Year, data=gross_df_aggregate, sum) year_merged &lt;- merge(total_by_year1, total_by_year2, &quot;movies.Year&quot;) g &lt;- ggplot(year_merged, aes(movies.Year)) g &lt;- g + geom_line(aes(y = gross), color = &quot;red&quot;) g &lt;- g + geom_line(aes(y = t_gross), color = &quot;blue&quot;) g #year_merged &lt;- year_merged %&gt;% pivot_longer(!movies.Year, names_to = &quot;Type of Gross&quot;, values_to = &quot;gross&quot;) "],["interactive-component.html", "Chapter 7 Interactive component", " Chapter 7 Interactive component "],["conclusion.html", "Chapter 8 Conclusion 8.1 Correlation between audience and critic scores - aggregate 8.2 Correlation between audience and IMDB score - aggregate 8.3 Correlation between critic and IMDB score - aggregate 8.4 Box and Whisker - IMDB rating and gross 8.5 Box and Whisker - audience rating and gross 8.6 Box and Whisker - critic rating and gross 8.7 Aggregating and filtering top earning studios 8.8 Cuts by year - audience vs. critic 8.9 Cuts by year - imdb vs. audience 8.10 Cuts by year - imdb vs. critic 8.11 Average IMDB rating by month and year 8.12 Average audience rating by month and year 8.13 Average critic rating by month and year 8.14 Average critic rating by month and year 8.15 Average ratings by just year 8.16 Average ratings by just year 8.17 Average ratings by just year 8.18 by genre", " Chapter 8 Conclusion 8.1 Correlation between audience and critic scores - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = audience_score, y = critic_score)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = audience_score, y = critic_score)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = audience_score, y = critic_score)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = audience_score, y = critic_score)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 8.2 Correlation between audience and IMDB score - aggregate gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = audience_score, y = rating)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = audience_score, y = rating)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = audience_score, y = rating)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = audience_score, y = rating)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) 8.3 Correlation between critic and IMDB score - aggregate gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = critic_score, y = rating)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = critic_score, y = rating)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = critic_score, y = rating)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = critic_score, y = rating)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) 8.4 Box and Whisker - IMDB rating and gross correlation_df$band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(band = ifelse(rating &lt;1, &quot;0-0.9&quot;, ifelse(rating&lt;2, &quot;1-1.9&quot;, ifelse(rating&lt;3,&quot;2-2.9&quot;, ifelse(rating&lt;4,&quot;3-3.9&quot;, ifelse(rating&lt;5,&quot;4-4.9&quot;, ifelse(rating&lt;6,&quot;5-5.9&quot;, ifelse(rating&lt;7,&quot;6-6.9&quot;, ifelse(rating&lt;8,&quot;7-7.9&quot;, ifelse(rating&lt;9,&quot;8-8.9&quot;, ifelse(rating&lt;=10,&quot;9-10&quot;))))))))))) g_imdb &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_imdb 8.5 Box and Whisker - audience rating and gross correlation_df$audience_band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(audience_band = ifelse(audience_score &lt;10, &quot;0-0.9&quot;, ifelse(audience_score&lt;20, &quot;1-1.9&quot;, ifelse(audience_score&lt;30,&quot;2-2.9&quot;, ifelse(audience_score&lt;40,&quot;3-3.9&quot;, ifelse(audience_score&lt;50,&quot;4-4.9&quot;, ifelse(audience_score&lt;60,&quot;5-5.9&quot;, ifelse(audience_score&lt;70,&quot;6-6.9&quot;, ifelse(audience_score&lt;80,&quot;7-7.9&quot;, ifelse(audience_score&lt;90,&quot;8-8.9&quot;, ifelse(audience_score&lt;=100,&quot;9-10&quot;,&quot;na&quot;))))))))))) g_audience &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = audience_band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by Audience ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_audience 8.6 Box and Whisker - critic rating and gross correlation_df$critic_band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(critic_band = ifelse(critic_score &lt;10, &quot;0-0.9&quot;, ifelse(critic_score&lt;20, &quot;1-1.9&quot;, ifelse(critic_score&lt;30,&quot;2-2.9&quot;, ifelse(critic_score&lt;40,&quot;3-3.9&quot;, ifelse(critic_score&lt;50,&quot;4-4.9&quot;, ifelse(critic_score&lt;60,&quot;5-5.9&quot;, ifelse(critic_score&lt;70,&quot;6-6.9&quot;, ifelse(critic_score&lt;80,&quot;7-7.9&quot;, ifelse(critic_score&lt;90,&quot;8-8.9&quot;, ifelse(critic_score&lt;=100,&quot;9-10&quot;,&quot;na&quot;))))))))))) g_critic &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = critic_band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by Critic ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_critic g_imdb + g_audience + g_critic + plot_layout(widths = 3, heights = 3) 8.7 Aggregating and filtering top earning studios movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 studio_df &lt;- data.frame(gross, movies$Studio) aggregate_df&lt;- aggregate(gross~movies.Studio, data=studio_df, sum) %&gt;% arrange(desc(gross)) 8.8 Cuts by year - audience vs. critic movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = audience_score, y = critic_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 8.9 Cuts by year - imdb vs. audience movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = rating, y = audience_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 8.10 Cuts by year - imdb vs. critic movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = rating, y = critic_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 8.11 Average IMDB rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$rating), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$rating) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) imdb_time&lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 8.12 Average audience rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$audience_score), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$audience_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) audience_time&lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 8.13 Average critic rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$critic_score), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$critic_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) critic_time &lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 8.14 Average critic rating by month and year imdb_time audience_time critic_time 8.15 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$rating), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$rating) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 8.16 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$audience_score), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$audience_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 8.17 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$critic_score), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$critic_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 8.18 by genre movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) head(movies) ## Rank Title Gross X..of.Theaters ## 1 1 Harry Potter and the Deathly Hallows: Part 2 381011219 4375 ## 2 2 Transformers: Dark of the Moon 352390543 4088 ## 3 3 The Twilight Saga: Breaking Dawn - Part 1 274841954 4066 ## 4 4 The Hangover Part II 254464305 3675 ## 5 5 Pirates of the Caribbean: On Stranger Tides 241071802 4164 ## 6 6 Fast Five 209837675 3793 ## Total.Gross Release.Date Studio Year ## 1 381011219 7/15 Warner Bros. 2011 ## 2 352390543 6/29 DreamWorks 2011 ## 3 281287133 11/18 Summit Entertainment 2011 ## 4 254464305 5/26 Warner Bros. 2011 ## 5 241071802 5/20 Walt Disney Studios Motion Pictures 2011 ## 6 209837675 4/29 Universal Pictures 2011 ## Score_Rotten Score_Audience genre genre1 genre2 ## 1 96 89 Adventure,Fantasy,Mystery Adventure Fantasy ## 2 35 55 Action,Adventure,Sci-Fi Action Adventure ## 3 25 60 Adventure,Drama,Fantasy Adventure Drama ## 4 34 52 Comedy Comedy ## 5 33 54 Action,Adventure,Fantasy Action Adventure ## 6 77 83 Action,Adventure,Crime Action Adventure ## genre3 average_rating numvotes startYear MISSING.VALUE Missing.Rotten ## 1 Mystery 8.1 808813 2011 0 0 ## 2 Sci-Fi 6.2 395497 2011 0 0 ## 3 Fantasy 4.9 232357 2011 0 0 ## 4 6.5 479995 2011 0 0 ## 5 Fantasy 6.6 500148 2011 0 0 ## 6 Crime 7.3 368386 2011 0 0 ## Missing.IMDB day month final_date ## 1 0 15 7 7/15/2011 ## 2 0 29 6 6/29/2011 ## 3 0 18 11 11/18/2011 ## 4 0 26 5 5/26/2011 ## 5 0 20 5 5/20/2011 ## 6 0 29 4 4/29/2011 gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) genre_df &lt;- data.frame(movies$Title, gross, audience_score, critic_score, rating, movies$genre1, movies$genre2, movies$genre3, movies$genre) colnames(genre_df) = c(&quot;title&quot;, &quot;gross&quot;, &quot;score_audience&quot;, &quot;score_rotten&quot;, &quot;average_rating&quot;, &quot;genre1&quot;, &quot;genre2&quot;, &quot;genre3&quot;, &quot;genre&quot;) aggregate_genre1&lt;- aggregate(gross~genre1, data=genre_df, sum) %&gt;% arrange(desc(gross)) aggregate_genre2&lt;- aggregate(gross~genre2, data=genre_df %&gt;% filter(genre_df$genre2 != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) aggregate_genre3&lt;- aggregate(gross~genre3, data=genre_df %&gt;% filter(genre_df$genre3 != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) aggregate_genre &lt;- aggregate(gross~genre, data=genre_df %&gt;% filter(genre_df$genre != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) genre1_unique &lt;- unique(genre_df$genre1) genre2_unique &lt;- unique(genre_df$genre2) genre3_unique &lt;- unique(genre_df$genre3) genre_unique &lt;- unique(genre_df$genre) g_genre1 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre1)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre2 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre2)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre3 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre3)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre1 g_genre2 g_genre3 genre_filtered &lt;- genre_df %&gt;% filter(gross&gt;50, genre1 == c(&quot;Action&quot;, &quot;Adventure&quot;, &quot;Comedy&quot;, &quot;Biography&quot;, &quot;Horror&quot;, &quot;Documentary&quot;, &quot;Animation&quot;), score_audience != &quot;MISSING VALUE&quot;) genre_correlation &lt;- ggplot(genre_filtered, aes(x = score_audience, y = gross)) + geom_point()+ geom_smooth(method=lm) + facet_wrap(~genre1) genre_correlation "],["introduction-1.html", "Chapter 9 Introduction", " Chapter 9 Introduction In the world of rotten tomatoes, metacritic, IMDB, and many others, movies are often picked apart by critics before audiences have a chance to even see the film. Although audiences often turn to these resources as a way to gauge their interest in seeing the actual film, many executives have bemoaned the prevalence of online reviews. A 2017 New York Times article, which explores Hollywoods reaction to a flat 2017 summer season, quotes industry insiders as saying: I think its Rotten Tomatoes the destruction of our business (Brett Ratner, director, producer and film financier). For our final project, we decided to take a deeper look at the entertainment industry. Therefore, our questions and objectives for this project will be centered around exploring the relationship between studio budgets, audience / critic perception, and box office performance, to see if Hollywood executives have taken any basic statistics courses and are justified in their complaints about the negative impact of Rotten Tomatoes (and others). 9.0.1 Our questions are as follows: How have Rotten Tomatoes / Metacritic / IMDB Ratings trended over time? Are audiences getting more or less pessimistic? How have box office returns trended over time? Are movies making more money or less? How are box office returns distributed? Is there a more equitable split across all movies released in a given quarter or have earnings consolidated? What is the correlation between audience scores and box office success? What is the correlation between studio budget and box office success? Do high-budget / low rating movies make more money? Or do low-budget, high ratings movies make more money? How does movie genre impact these previous questions? Can we split across horror / action / romance / etc.? What would be the relationship between the movies, that were released on the same date? How well did the movies perform financially, when they were released on the same weekend? "],["data-sources-1.html", "Chapter 10 Data sources 10.1 Rotten Tomatoes 10.2 IMDB 10.3 Final Data Table", " Chapter 10 Data sources In order to aggregate a comprehensive list of movie titles, box office gross, and ratings, we turned to the following data sources and followed the following processes. The first observation we made is that the IMDB data set with aggregate movies, genres, and ratings was quite large. For movies alone, there were well over millions of titles from around the world. Therefore, we needed to make some strategic decisions about which movies to include, and what logic to include. Because of the sheer volume of titles, we aggregated the following: We constrained our movies to be within movies released from 2011 to 2021 We constrained the movies included to be the top 200 total grossing movies from each year Total gross includes both box office and streaming services Once we constrained our list, the first task was to get a working list of the movies we wanted to include. We first turned to box office mojo, https://www.boxofficemojo.com/, which is a product offered by IMDB. In box office mojo, IMDB aggregates the top 200 movies from each year by title, gross, total gross, and number of theaters the film was released in. Using this data source, we aggregated all movies from each year to create our first data frame and get our initial movie list we planned to scrape. 10.1 Rotten Tomatoes Rotten Tomatoes is one of the most cited and well known movie ratings websites in the world. Rotten Tomatoes aggregates both an &quot;audience score&quot; and a &quot;critics score&quot;. This distinction is important, as one of our focuses of our analysis is looking at how reviews impact box office scores, and so by having both of these perspectives we can see if one or the other drives box office performance more. In order to aggregate our Rotten Tomatoes data, we used a simple Rotten Tomatoes scraper package in python. The documentation can be found here: https://github.com/pdrm83/rotten_tomatoes_scraper To implement this scraper, we passed in our initial list of 2,200 movie titles that we had originally sorted by box office gross in our initial data collection. By iterating through each title in our list, we were able to successfully scrape both audience and critic ratings from Rotten Tomatoes, with only minor data loss (more on that in the missing values section). 10.2 IMDB As previously mentioned, the IMDB data set is quite large. Because IMDB traces movies, shorts, and TV shows back to the early days of film (the early 1900s), the data set was quite unweildy and took quite a bit of masnaging to wrangle. We will cover exactly how we cleaned this data in our cleaning section. The two files we pulled from the IMDB data were the &quot;title.ratings.tsv.gz&quot; and &quot;title.basic.tsv.gz&quot;. The documentation can be found here: https://www.imdb.com/interfaces/ For the ratings file, there were 3 elements: tconst (the unique title identifier; a string) averageRating (from 0-10) numVotes (the number of votes included) For the titles file, there were 9 elements: tconst (the unique title identifier; a string) titleType (the type of film it is - could be TV Show, Movie, Short, etc.) primaryTitle (the title used in promotional materials. This was the title we used in our filtering) originalTitle (the title originally used. Typically the two titles are the same, unless one is in a different language) isAdult (boolean operator for adult movies. We did not include any adult movies in our analysis) startYear (release year of the title) endYear (only used for TV series; if the series ended) runTimeMinutes (run time of the title) genres (the genre of the film. Can be 1 - 3 values in a string) 10.3 Final Data Table After aggregating the three data sources, we had the following data inputs: ## [1] &quot;Rank - ranking of box office gross within the release year&quot; ## [2] &quot;Movie Title&quot; ## [3] &quot;Gross&quot; ## [4] &quot;Number of Theaters&quot; ## [5] &quot;Total Gross - includes streaming / DVD / etc.&quot; ## [6] &quot;Release Date (D/M)&quot; ## [7] &quot;Primary Studio&quot; ## [8] &quot;Year Released&quot; ## [9] &quot;Critic score scraped from RT&quot; ## [10] &quot;Audience score scraped from RT&quot; ## [11] &quot;Genre - concatenated - max 3 elements&quot; ## [12] &quot;1st genre element&quot; ## [13] &quot;2nd genre element&quot; ## [14] &quot;3rd genre element&quot; ## [15] &quot;Average IMDB rating&quot; ## [16] &quot;Number of IMDB votes&quot; ## [17] &quot;Year pulled from IMDB&quot; ======= * Scraped data from rotten tomatoes * Downloaded from imdb * Chosen because these are the biggest hubs for movie information * Refer to sample column names above * Started from 2300 * Talk about how we picked the top 200 movies * Talk about why we picked the top 200 movies * Issues: duplicate names, same movie multiple countries "],["data-transformation-1.html", "Chapter 11 Data transformation 11.1 Box Office Mojo 11.2 Rotten Tomatoes 11.3 IMDB 11.4 Aggregation", " Chapter 11 Data transformation The data transofrmation process was relatively straightforward. For each source, we will go through how and in what platforms we aggregated the values. 11.1 Box Office Mojo The box office mojo data set is presented in a simple table that is easily scraped from the website. For each year we were evaluating, we filted by top 200 movies, and imported the data into a CSV by title. From there, we had an aggregate list of 2,200 movies from 2011-2021. 11.2 Rotten Tomatoes Once we ran the scraper, we output the rotten tomatoes data from jupyter notebook into a CSV. The data was organized by movie title, and by critic / audience rating. 11.3 IMDB This was one of the most cumbersome cleaning processes, because the data set was so large. In order to make it more managable, we did all of our maniuplation in python, and filtered on the following: Release Year - we had to convert to a numeric string, and then filtered if release year was greater than 2010 Title Type - we filtered only movies From there, we imported a new .dat file that was the aggregate list of 2,200 movies we had originally scraped from Box Office Mojo, and iterated through the remaining data values to pull the required IMDB data. We output the new IMDB data into a CSV file as well. 11.4 Aggregation "],["after-our-scraping-from-the-3-sources-we-had-3-unique-csv-files.-we-merged-these-files-by-title-to-create-our-aggregate-list-of-movies-and-the-corresponding-data-points.-1.html", "Chapter 12 After our scraping from the 3 sources, we had 3 unique CSV files. We merged these files by title, to create our aggregate list of movies and the corresponding data points. 12.1 Looking For Missing Data In The Ratings: IMDB, Score_Audience and Score_Rotten", " Chapter 12 After our scraping from the 3 sources, we had 3 unique CSV files. We merged these files by title, to create our aggregate list of movies and the corresponding data points. Downloaded data from imdb tsv Scraped rotten tomatoes Excel spreadsheet to csv Brought together with python Merge on whatever column names Here, The three chart shows us in which row do we have missing values. Like from the first bar chart, we can see that we are missing more than 750 rows of data in the Genre_3 or G_3 column. Using this data gives us a bit of an idea on how to proceed with further analysis. Here, we can see where in our dataset do we have na values or the missing values, which columns have more missing data.This tile visualization provides us with a concrete idea of the placement of the missing values. Example: We can see that there are a lot of movies with Genre_3 which are missing some values. Here we only took the data from 100-200. Just to show the example, and the visualization better. 12.1 Looking For Missing Data In The Ratings: IMDB, Score_Audience and Score_Rotten Here, we created three extra columns to check whether we had any missing ratings or scores abd populated them with 1 and 0. 1 for True they are missing and 0 for false they are not. We can see that in our dataset, we had 150 missing IMDB ratings for our movies, and about 110 values for our audience score, and the total missing values for score_ratings were about 260. Here, MISSING.VALUE is score ratings. "],["results-1.html", "Chapter 13 Results 13.1 Correlation between total gross and audience score - aggregate 13.2 Correlation between total gross and critic score - aggregate 13.3 Correlation between total gross and IMDB score - aggregate", " Chapter 13 Results 13.1 Correlation between total gross and audience score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = audience_score, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 13.2 Correlation between total gross and critic score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = critic_score, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 13.3 Correlation between total gross and IMDB score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = rating, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test "],["filtering-by-good-and-bad-movies-1.html", "Chapter 14 Filtering by &quot;Good and bad movies&quot; 14.1 Correlation between total gross and audience score - aggregate 14.2 Correlation between total gross and critic score - aggregate 14.3 Correlation between total gross and IMDB score - aggregate 14.4 Correlation between audience and critic scores - aggregate 14.5 Correlation between audience and IMDB score - aggregate 14.6 Correlation between critic and IMDB score - aggregate 14.7 Box and Whisker - IMDB rating and gross 14.8 Box and Whisker - audience rating and gross 14.9 Box and Whisker - critic rating and gross 14.10 Aggregating and filtering top earning studios 14.11 Cuts by year - audience vs. critic 14.12 Cuts by year - imdb vs. audience 14.13 Cuts by year - imdb vs. critic 14.14 Average IMDB rating by month and year 14.15 Average audience rating by month and year 14.16 Average critic rating by month and year 14.17 Average critic rating by month and year 14.18 Average ratings by just year 14.19 Average ratings by just year 14.20 Average ratings by just year 14.21 by genre 14.22 Aggregating and filtering top earning studios 14.23 Aggregating gross and total gross", " Chapter 14 Filtering by &quot;Good and bad movies&quot; 14.1 Correlation between total gross and audience score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0, audience_score&gt;50), aes(x = audience_score, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000, audience_score&gt;50), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000, audience_score&gt;50), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000, audience_score&gt;50), aes(x = audience_score, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 14.2 Correlation between total gross and critic score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0, critic_score&gt;50), aes(x = critic_score, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000, critic_score&gt;50), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000,critic_score&gt;50), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000,critic_score&gt;50), aes(x = critic_score, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 14.3 Correlation between total gross and IMDB score - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0, rating&gt;5), aes(x = rating, y = gross)) + geom_point() +geom_smooth(method = lm) g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000, rating&gt;5), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000, rating&gt;5), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000, rating&gt;5), aes(x = rating, y = gross)) + geom_point()+geom_smooth(method = lm) g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 14.4 Correlation between audience and critic scores - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = audience_score, y = critic_score)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = audience_score, y = critic_score)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = audience_score, y = critic_score)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = audience_score, y = critic_score)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 14.5 Correlation between audience and IMDB score - aggregate gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = audience_score, y = rating)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = audience_score, y = rating)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = audience_score, y = rating)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = audience_score, y = rating)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) 14.6 Correlation between critic and IMDB score - aggregate gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = critic_score, y = rating)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = critic_score, y = rating)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = critic_score, y = rating)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = critic_score, y = rating)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) 14.7 Box and Whisker - IMDB rating and gross correlation_df$band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(band = ifelse(rating &lt;1, &quot;0-0.9&quot;, ifelse(rating&lt;2, &quot;1-1.9&quot;, ifelse(rating&lt;3,&quot;2-2.9&quot;, ifelse(rating&lt;4,&quot;3-3.9&quot;, ifelse(rating&lt;5,&quot;4-4.9&quot;, ifelse(rating&lt;6,&quot;5-5.9&quot;, ifelse(rating&lt;7,&quot;6-6.9&quot;, ifelse(rating&lt;8,&quot;7-7.9&quot;, ifelse(rating&lt;9,&quot;8-8.9&quot;, ifelse(rating&lt;=10,&quot;9-10&quot;))))))))))) g_imdb &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_imdb 14.8 Box and Whisker - audience rating and gross correlation_df$audience_band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(audience_band = ifelse(audience_score &lt;10, &quot;0-0.9&quot;, ifelse(audience_score&lt;20, &quot;1-1.9&quot;, ifelse(audience_score&lt;30,&quot;2-2.9&quot;, ifelse(audience_score&lt;40,&quot;3-3.9&quot;, ifelse(audience_score&lt;50,&quot;4-4.9&quot;, ifelse(audience_score&lt;60,&quot;5-5.9&quot;, ifelse(audience_score&lt;70,&quot;6-6.9&quot;, ifelse(audience_score&lt;80,&quot;7-7.9&quot;, ifelse(audience_score&lt;90,&quot;8-8.9&quot;, ifelse(audience_score&lt;=100,&quot;9-10&quot;,&quot;na&quot;))))))))))) g_audience &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = audience_band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by Audience ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_audience 14.9 Box and Whisker - critic rating and gross correlation_df$critic_band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(critic_band = ifelse(critic_score &lt;10, &quot;0-0.9&quot;, ifelse(critic_score&lt;20, &quot;1-1.9&quot;, ifelse(critic_score&lt;30,&quot;2-2.9&quot;, ifelse(critic_score&lt;40,&quot;3-3.9&quot;, ifelse(critic_score&lt;50,&quot;4-4.9&quot;, ifelse(critic_score&lt;60,&quot;5-5.9&quot;, ifelse(critic_score&lt;70,&quot;6-6.9&quot;, ifelse(critic_score&lt;80,&quot;7-7.9&quot;, ifelse(critic_score&lt;90,&quot;8-8.9&quot;, ifelse(critic_score&lt;=100,&quot;9-10&quot;,&quot;na&quot;))))))))))) g_critic &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = critic_band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by Critic ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_critic g_imdb + g_audience + g_critic + plot_layout(widths = 3, heights = 3) 14.10 Aggregating and filtering top earning studios movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 studio_df &lt;- data.frame(gross, movies$Studio) aggregate_df&lt;- aggregate(gross~movies.Studio, data=studio_df, sum) %&gt;% arrange(desc(gross)) 14.11 Cuts by year - audience vs. critic movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = audience_score, y = critic_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 14.12 Cuts by year - imdb vs. audience movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = rating, y = audience_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 14.13 Cuts by year - imdb vs. critic movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = rating, y = critic_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 14.14 Average IMDB rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$rating), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$rating) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) imdb_time&lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 14.15 Average audience rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$audience_score), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$audience_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) audience_time&lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 14.16 Average critic rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$critic_score), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$critic_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) critic_time &lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 14.17 Average critic rating by month and year imdb_time audience_time critic_time 14.18 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$rating), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$rating) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 14.19 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$audience_score), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$audience_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 14.20 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$critic_score), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$critic_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 14.21 by genre movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) head(movies) ## Rank Title Gross X..of.Theaters ## 1 1 Harry Potter and the Deathly Hallows: Part 2 381011219 4375 ## 2 2 Transformers: Dark of the Moon 352390543 4088 ## 3 3 The Twilight Saga: Breaking Dawn - Part 1 274841954 4066 ## 4 4 The Hangover Part II 254464305 3675 ## 5 5 Pirates of the Caribbean: On Stranger Tides 241071802 4164 ## 6 6 Fast Five 209837675 3793 ## Total.Gross Release.Date Studio Year ## 1 381011219 7/15 Warner Bros. 2011 ## 2 352390543 6/29 DreamWorks 2011 ## 3 281287133 11/18 Summit Entertainment 2011 ## 4 254464305 5/26 Warner Bros. 2011 ## 5 241071802 5/20 Walt Disney Studios Motion Pictures 2011 ## 6 209837675 4/29 Universal Pictures 2011 ## Score_Rotten Score_Audience genre genre1 genre2 ## 1 96 89 Adventure,Fantasy,Mystery Adventure Fantasy ## 2 35 55 Action,Adventure,Sci-Fi Action Adventure ## 3 25 60 Adventure,Drama,Fantasy Adventure Drama ## 4 34 52 Comedy Comedy ## 5 33 54 Action,Adventure,Fantasy Action Adventure ## 6 77 83 Action,Adventure,Crime Action Adventure ## genre3 average_rating numvotes startYear MISSING.VALUE Missing.Rotten ## 1 Mystery 8.1 808813 2011 0 0 ## 2 Sci-Fi 6.2 395497 2011 0 0 ## 3 Fantasy 4.9 232357 2011 0 0 ## 4 6.5 479995 2011 0 0 ## 5 Fantasy 6.6 500148 2011 0 0 ## 6 Crime 7.3 368386 2011 0 0 ## Missing.IMDB day month final_date ## 1 0 15 7 7/15/2011 ## 2 0 29 6 6/29/2011 ## 3 0 18 11 11/18/2011 ## 4 0 26 5 5/26/2011 ## 5 0 20 5 5/20/2011 ## 6 0 29 4 4/29/2011 gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) genre_df &lt;- data.frame(movies$Title, gross, audience_score, critic_score, rating, movies$genre1, movies$genre2, movies$genre3, movies$genre) colnames(genre_df) = c(&quot;title&quot;, &quot;gross&quot;, &quot;score_audience&quot;, &quot;score_rotten&quot;, &quot;average_rating&quot;, &quot;genre1&quot;, &quot;genre2&quot;, &quot;genre3&quot;, &quot;genre&quot;) aggregate_genre1&lt;- aggregate(gross~genre1, data=genre_df, sum) %&gt;% arrange(desc(gross)) aggregate_genre2&lt;- aggregate(gross~genre2, data=genre_df %&gt;% filter(genre_df$genre2 != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) aggregate_genre3&lt;- aggregate(gross~genre3, data=genre_df %&gt;% filter(genre_df$genre3 != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) aggregate_genre &lt;- aggregate(gross~genre, data=genre_df %&gt;% filter(genre_df$genre != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) genre1_unique &lt;- unique(genre_df$genre1) genre2_unique &lt;- unique(genre_df$genre2) genre3_unique &lt;- unique(genre_df$genre3) genre_unique &lt;- unique(genre_df$genre) g_genre1 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre1)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre2 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre2)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre3 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre3)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre1 g_genre2 g_genre3 genre_filtered &lt;- genre_df %&gt;% filter(gross&gt;50, genre1 == c(&quot;Action&quot;, &quot;Adventure&quot;, &quot;Comedy&quot;, &quot;Biography&quot;, &quot;Horror&quot;, &quot;Documentary&quot;, &quot;Animation&quot;), score_audience != &quot;MISSING VALUE&quot;) genre_correlation &lt;- ggplot(genre_filtered, aes(x = score_audience, y = gross)) + geom_point()+ geom_smooth(method=lm) + facet_wrap(~genre1) genre_correlation 14.22 Aggregating and filtering top earning studios movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 studio_df &lt;- data.frame(gross, movies$Studio, movies$Year) total_by_studio&lt;- aggregate(gross~movies.Studio, data=studio_df, sum) %&gt;% arrange(desc(gross)) aggregate_df&lt;- aggregate(gross~movies.Studio+movies.Year, data=studio_df, sum) %&gt;% arrange(desc(gross)) final_merged &lt;- merge(aggregate_df, total_by_studio, &quot;movies.Studio&quot;) %&gt;% filter(gross.y&gt;20000) ggplot(data=final_merged, aes(x=movies.Year, y=gross.x, color = movies.Studio))+ geom_line() for_table &lt;- data.frame(gross, movies$Studio, movies$Year, movies$Title) %&gt;% filter(movies$Studio %in% c(&quot;Walt Disney Studios Motion Pictures&quot;, &quot;Warner Bros.&quot;, &quot;Universal Pictures&quot;, &quot;Twentieth Century Fox&quot;, &quot;The Weinstein Company&quot;, &quot;Sony Pictures Entertainment (SPE)&quot;, &quot;Paramount Pictures&quot;, &quot;Lionsgate&quot;)) 14.23 Aggregating gross and total gross movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) t_gross &lt;- as.numeric(movies$Total.Gross)/100000 gross &lt;- as.numeric(movies$Gross)/100000 gross_df_aggregate &lt;- data.frame(gross, t_gross, movies$Year) total_by_year1&lt;- aggregate(gross~movies.Year, data=gross_df_aggregate, sum) total_by_year2&lt;- aggregate(t_gross~movies.Year, data=gross_df_aggregate, sum) year_merged &lt;- merge(total_by_year1, total_by_year2, &quot;movies.Year&quot;) g &lt;- ggplot(year_merged, aes(movies.Year)) g &lt;- g + geom_line(aes(y = gross), color = &quot;red&quot;) g &lt;- g + geom_line(aes(y = t_gross), color = &quot;blue&quot;) g #year_merged &lt;- year_merged %&gt;% pivot_longer(!movies.Year, names_to = &quot;Type of Gross&quot;, values_to = &quot;gross&quot;) "],["interactive-component-1.html", "Chapter 15 Interactive component", " Chapter 15 Interactive component "],["conclusion-1.html", "Chapter 16 Conclusion 16.1 Correlation between audience and critic scores - aggregate 16.2 Correlation between audience and IMDB score - aggregate 16.3 Correlation between critic and IMDB score - aggregate 16.4 Box and Whisker - IMDB rating and gross 16.5 Box and Whisker - audience rating and gross 16.6 Box and Whisker - critic rating and gross 16.7 Aggregating and filtering top earning studios 16.8 Cuts by year - audience vs. critic 16.9 Cuts by year - imdb vs. audience 16.10 Cuts by year - imdb vs. critic 16.11 Average IMDB rating by month and year 16.12 Average audience rating by month and year 16.13 Average critic rating by month and year 16.14 Average critic rating by month and year 16.15 Average ratings by just year 16.16 Average ratings by just year 16.17 Average ratings by just year 16.18 by genre", " Chapter 16 Conclusion 16.1 Correlation between audience and critic scores - aggregate movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = audience_score, y = critic_score)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = audience_score, y = critic_score)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = audience_score, y = critic_score)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = audience_score, y = critic_score)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) #test 16.2 Correlation between audience and IMDB score - aggregate gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = audience_score, y = rating)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = audience_score, y = rating)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = audience_score, y = rating)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = audience_score, y = rating)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) 16.3 Correlation between critic and IMDB score - aggregate gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) correlation_df &lt;- data.frame(gross, rating, audience_score, critic_score) g1&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 0), aes(x = critic_score, y = rating)) + geom_point() g2&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 1000), aes(x = critic_score, y = rating)) + geom_point() g3&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 2000), aes(x = critic_score, y = rating)) + geom_point() g4&lt;- ggplot(correlation_df %&gt;% filter(gross &gt; 5000), aes(x = critic_score, y = rating)) + geom_point() g1 + g2 + g3 + g4 +plot_layout(widths = c(1, 1), heights = c(1,1)) 16.4 Box and Whisker - IMDB rating and gross correlation_df$band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(band = ifelse(rating &lt;1, &quot;0-0.9&quot;, ifelse(rating&lt;2, &quot;1-1.9&quot;, ifelse(rating&lt;3,&quot;2-2.9&quot;, ifelse(rating&lt;4,&quot;3-3.9&quot;, ifelse(rating&lt;5,&quot;4-4.9&quot;, ifelse(rating&lt;6,&quot;5-5.9&quot;, ifelse(rating&lt;7,&quot;6-6.9&quot;, ifelse(rating&lt;8,&quot;7-7.9&quot;, ifelse(rating&lt;9,&quot;8-8.9&quot;, ifelse(rating&lt;=10,&quot;9-10&quot;))))))))))) g_imdb &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_imdb 16.5 Box and Whisker - audience rating and gross correlation_df$audience_band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(audience_band = ifelse(audience_score &lt;10, &quot;0-0.9&quot;, ifelse(audience_score&lt;20, &quot;1-1.9&quot;, ifelse(audience_score&lt;30,&quot;2-2.9&quot;, ifelse(audience_score&lt;40,&quot;3-3.9&quot;, ifelse(audience_score&lt;50,&quot;4-4.9&quot;, ifelse(audience_score&lt;60,&quot;5-5.9&quot;, ifelse(audience_score&lt;70,&quot;6-6.9&quot;, ifelse(audience_score&lt;80,&quot;7-7.9&quot;, ifelse(audience_score&lt;90,&quot;8-8.9&quot;, ifelse(audience_score&lt;=100,&quot;9-10&quot;,&quot;na&quot;))))))))))) g_audience &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = audience_band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by Audience ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_audience 16.6 Box and Whisker - critic rating and gross correlation_df$critic_band &lt;- 1 correlation_df &lt;- correlation_df %&gt;% mutate(critic_band = ifelse(critic_score &lt;10, &quot;0-0.9&quot;, ifelse(critic_score&lt;20, &quot;1-1.9&quot;, ifelse(critic_score&lt;30,&quot;2-2.9&quot;, ifelse(critic_score&lt;40,&quot;3-3.9&quot;, ifelse(critic_score&lt;50,&quot;4-4.9&quot;, ifelse(critic_score&lt;60,&quot;5-5.9&quot;, ifelse(critic_score&lt;70,&quot;6-6.9&quot;, ifelse(critic_score&lt;80,&quot;7-7.9&quot;, ifelse(critic_score&lt;90,&quot;8-8.9&quot;, ifelse(critic_score&lt;=100,&quot;9-10&quot;,&quot;na&quot;))))))))))) g_critic &lt;- ggplot(data = correlation_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = critic_band)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by Critic ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_critic g_imdb + g_audience + g_critic + plot_layout(widths = 3, heights = 3) 16.7 Aggregating and filtering top earning studios movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 studio_df &lt;- data.frame(gross, movies$Studio) aggregate_df&lt;- aggregate(gross~movies.Studio, data=studio_df, sum) %&gt;% arrange(desc(gross)) 16.8 Cuts by year - audience vs. critic movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = audience_score, y = critic_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 16.9 Cuts by year - imdb vs. audience movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = rating, y = audience_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 16.10 Cuts by year - imdb vs. critic movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- movies$Year total_year &lt;- data.frame(movies$Title, gross, rating, audience_score, critic_score, year) year_chart &lt;- ggplot(total_year %&gt;% filter(gross &gt; 500), aes(x = rating, y = critic_score)) + geom_point()+ geom_smooth(method=lm) +facet_wrap(~year) year_chart 16.11 Average IMDB rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$rating), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$rating) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) imdb_time&lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 16.12 Average audience rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$audience_score), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$audience_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) audience_time&lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 16.13 Average critic rating by month and year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) months &lt;- data.frame(c(1,2,3,4,5,6,7,8,9,10,11,12)) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 12, ncol = length(years))) # assign column names colnames(averages_df) = years averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) averages_chart &lt;- averages_chart %&gt;% filter(averages_chart$month == 5, averages_chart$year == 2012) my_range &lt;- 1:12 year_range &lt;- 2011:2021 k = 0 for(i in year_range){ averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 for(j in my_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$critic_score), averages_chart$month == j, averages_chart$year == i) averages_df[j,k] = mean(averages_chart$critic_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) } } averages_df$month = c(1,2,3,4,5,6,7,8,9,10,11,12) tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) critic_time &lt;- ggplot(tidy_averages, aes(Date, averages, fill=year)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 16.14 Average critic rating by month and year imdb_time audience_time critic_time 16.15 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$rating), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$rating) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 16.16 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$audience_score), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$audience_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 16.17 Average ratings by just year movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) month &lt;- as.numeric(movies$month) rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) year &lt;- as.numeric(movies$Year) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) years = c(2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021) averages_df = data.frame(matrix(nrow = 1, ncol = length(years))) # assign column names colnames(averages_df) = years year_range &lt;- 2011:2021 k = 1 for(i in year_range){ averages_chart &lt;- averages_chart %&gt;% filter(!is.na(averages_chart$critic_score), averages_chart$year == i) averages_df[1,k] = mean(averages_chart$critic_score) averages_chart &lt;- data.frame(movies$Title, month, rating, audience_score, critic_score, year) k = k+1 } averages_df[nrow(averages_df) + 1,] = years averages_transposed = as.data.frame(t(averages_df)) names(averages_transposed)[2] &lt;- &quot;years&quot; names(averages_transposed)[1] &lt;- &quot;avg&quot; #tidy_averages &lt;- averages_df %&gt;% pivot_longer(!month, names_to = &quot;year&quot;, values_to = &quot;averages&quot;) #tidy_averages$Date &lt;- with(tidy_averages, sprintf(&quot;%s-%02s&quot;, year, month)) ggplot(averages_transposed, aes(years, avg)) + geom_col()+ theme(axis.text.x = element_text(angle = 65, hjust = 1)) 16.18 by genre movies &lt;- read.csv(&quot;MOVIES_Final_12.11.2021_vAC.csv&quot;) head(movies) ## Rank Title Gross X..of.Theaters ## 1 1 Harry Potter and the Deathly Hallows: Part 2 381011219 4375 ## 2 2 Transformers: Dark of the Moon 352390543 4088 ## 3 3 The Twilight Saga: Breaking Dawn - Part 1 274841954 4066 ## 4 4 The Hangover Part II 254464305 3675 ## 5 5 Pirates of the Caribbean: On Stranger Tides 241071802 4164 ## 6 6 Fast Five 209837675 3793 ## Total.Gross Release.Date Studio Year ## 1 381011219 7/15 Warner Bros. 2011 ## 2 352390543 6/29 DreamWorks 2011 ## 3 281287133 11/18 Summit Entertainment 2011 ## 4 254464305 5/26 Warner Bros. 2011 ## 5 241071802 5/20 Walt Disney Studios Motion Pictures 2011 ## 6 209837675 4/29 Universal Pictures 2011 ## Score_Rotten Score_Audience genre genre1 genre2 ## 1 96 89 Adventure,Fantasy,Mystery Adventure Fantasy ## 2 35 55 Action,Adventure,Sci-Fi Action Adventure ## 3 25 60 Adventure,Drama,Fantasy Adventure Drama ## 4 34 52 Comedy Comedy ## 5 33 54 Action,Adventure,Fantasy Action Adventure ## 6 77 83 Action,Adventure,Crime Action Adventure ## genre3 average_rating numvotes startYear MISSING.VALUE Missing.Rotten ## 1 Mystery 8.1 808813 2011 0 0 ## 2 Sci-Fi 6.2 395497 2011 0 0 ## 3 Fantasy 4.9 232357 2011 0 0 ## 4 6.5 479995 2011 0 0 ## 5 Fantasy 6.6 500148 2011 0 0 ## 6 Crime 7.3 368386 2011 0 0 ## Missing.IMDB day month final_date ## 1 0 15 7 7/15/2011 ## 2 0 29 6 6/29/2011 ## 3 0 18 11 11/18/2011 ## 4 0 26 5 5/26/2011 ## 5 0 20 5 5/20/2011 ## 6 0 29 4 4/29/2011 gross &lt;- as.numeric(movies$Total.Gross)/100000 rating &lt;- as.numeric(movies$average_rating) audience_score &lt;- as.numeric(movies$Score_Audience) critic_score &lt;- as.numeric(movies$Score_Rotten) genre_df &lt;- data.frame(movies$Title, gross, audience_score, critic_score, rating, movies$genre1, movies$genre2, movies$genre3, movies$genre) colnames(genre_df) = c(&quot;title&quot;, &quot;gross&quot;, &quot;score_audience&quot;, &quot;score_rotten&quot;, &quot;average_rating&quot;, &quot;genre1&quot;, &quot;genre2&quot;, &quot;genre3&quot;, &quot;genre&quot;) aggregate_genre1&lt;- aggregate(gross~genre1, data=genre_df, sum) %&gt;% arrange(desc(gross)) aggregate_genre2&lt;- aggregate(gross~genre2, data=genre_df %&gt;% filter(genre_df$genre2 != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) aggregate_genre3&lt;- aggregate(gross~genre3, data=genre_df %&gt;% filter(genre_df$genre3 != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) aggregate_genre &lt;- aggregate(gross~genre, data=genre_df %&gt;% filter(genre_df$genre != &quot;&quot;), sum) %&gt;% arrange(desc(gross)) genre1_unique &lt;- unique(genre_df$genre1) genre2_unique &lt;- unique(genre_df$genre2) genre3_unique &lt;- unique(genre_df$genre3) genre_unique &lt;- unique(genre_df$genre) g_genre1 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre1)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre2 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre2)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre3 &lt;- ggplot(data = genre_df %&gt;% filter(gross &gt; 1000), mapping = aes(x = gross, y = genre3)) + geom_boxplot(outlier.color = &#39;red&#39;) + xlab(&quot;gross&quot;) + ylab(&quot;ratings band&quot;) + ggtitle(&quot;Box Plot of gross by IMDB ratings band&quot;)+ theme(plot.title = element_text(hjust = 0.5)) g_genre1 g_genre2 g_genre3 genre_filtered &lt;- genre_df %&gt;% filter(gross&gt;50, genre1 == c(&quot;Action&quot;, &quot;Adventure&quot;, &quot;Comedy&quot;, &quot;Biography&quot;, &quot;Horror&quot;, &quot;Documentary&quot;, &quot;Animation&quot;), score_audience != &quot;MISSING VALUE&quot;) genre_correlation &lt;- ggplot(genre_filtered, aes(x = score_audience, y = gross)) + geom_point()+ geom_smooth(method=lm) + facet_wrap(~genre1) genre_correlation "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
